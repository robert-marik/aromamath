Traceback (most recent call last):
  File "/mnt/python/miniforge3/envs/jupyter-book/lib/python3.14/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/mnt/python/miniforge3/envs/jupyter-book/lib/python3.14/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/mnt/python/miniforge3/envs/jupyter-book/lib/python3.14/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/mnt/python/miniforge3/envs/jupyter-book/lib/python3.14/asyncio/base_events.py", line 719, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/mnt/python/miniforge3/envs/jupyter-book/lib/python3.14/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/mnt/python/miniforge3/envs/jupyter-book/lib/python3.14/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/mnt/python/miniforge3/envs/jupyter-book/lib/python3.14/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def P(x,y):    # definice komponent vektorového pole
    return (6*x**2*y+x+y)
    
def Q(x,y):
    return (2*x**3+x)

for i in range(x.shape[0]):            # Vyplníme pole s hodnotami potenciálu příslušnými hodnotami v cyklu přes první a druhou proměnnou
    for j in range(y.shape[0]):
        PotencialPrimka[i][j] = KrivkovyIntegralPrimka(P, Q, x[i], y[j])      # Výpočet a uložení integálu po přímce
        PotencialParabola[i][j] = KrivkovyIntegralParabola(P, Q, x[i], y[j])  # Výpočet a uložení integálu po kubické parabole
------------------


[31m---------------------------------------------------------------------------[39m
[31mAttributeError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 9[39m
[32m      7[39m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(x.shape[[32m0[39m]):            [38;5;66;03m# Vyplníme pole s hodnotami potenciálu příslušnými hodnotami v cyklu přes první a druhou proměnnou[39;00m
[32m      8[39m     [38;5;28;01mfor[39;00m j [38;5;129;01min[39;00m [38;5;28mrange[39m(y.shape[[32m0[39m]):
[32m----> [39m[32m9[39m         PotencialPrimka[i][j] = [43mKrivkovyIntegralPrimka[49m[43m([49m[43mP[49m[43m,[49m[43m [49m[43mQ[49m[43m,[49m[43m [49m[43mx[49m[43m[[49m[43mi[49m[43m][49m[43m,[49m[43m [49m[43my[49m[43m[[49m[43mj[49m[43m][49m[43m)[49m      [38;5;66;03m# Výpočet a uložení integálu po přímce[39;00m
[32m     10[39m         PotencialParabola[i][j] = KrivkovyIntegralParabola(P, Q, x[i], y[j])  [38;5;66;03m# Výpočet a uložení integálu po kubické parabole[39;00m

[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 4[39m, in [36mKrivkovyIntegralPrimka[39m[34m(P, Q, a, b)[39m
[32m      2[39m t = numpy.linspace([32m0[39m,[32m1[39m,[32m100[39m)                         [38;5;66;03m# Nastavíme interval pro diskretizaci integrálu[39;00m
[32m      3[39m integrand = P(a*t,b*t)*a+Q(a*t,b*t)*b               [38;5;66;03m# Vypočteme skalární součin vektorového pole a tečného vektoru k přímce[39;00m
[32m----> [39m[32m4[39m [38;5;28;01mreturn[39;00m([43mscipy[49m[43m.[49m[43mintegrate[49m[43m.[49m[43msimps[49m(integrand,t))

[31mAttributeError[39m: module 'scipy.integrate' has no attribute 'simps'

